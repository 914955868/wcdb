apply plugin: 'com.android.library'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.3'

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    defaultPublishConfig 'release'
    publishNonDefault true
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':wcdb')

    compile 'android.arch.persistence.room:runtime:1.1.1'
    annotationProcessor 'android.arch.persistence.room:compiler:1.1.1'
}


android.libraryVariants.all { variant ->

    def varName = variant.name
    def cvarName = varName.capitalize()

    // emit Javadoc generation task
    def genJavadocTask = task("generate${cvarName}Javadoc", type: Javadoc) {
        description "Generates Javadoc for ${varName}."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"

        title = null

        options {
            memberLevel = JavadocMemberLevel.PUBLIC

            doclet = 'com.google.doclava.Doclava'
            docletpath = [rootProject.file('gradle/doclava-1.0.6.jar')]

            addStringOption('title', 'WCDB for Android')
            addStringOption('hdf project.name', 'WCDB for Android')
            //addStringOption('federate Android', 'http://d.android.com/reference')
            //addStringOption('federationxml Android', rootProject.file('gradle/android-10.xml').path)
        }

        exclude "**/BuildConfig.java"
        exclude "**/R.java"

        doFirst {
            classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        }

        dependsOn "generate${cvarName}Sources"
    }

    // emit Javadoc bundling task
    task("bundle${cvarName}Javadoc", type: Jar) {
        classifier = 'javadoc'
        from genJavadocTask.destinationDir
        dependsOn genJavadocTask
    }

    // emit source bundling task
    task("bundle${cvarName}Sources", type: Jar) {
        classifier = 'sources'
        from variant.javaCompile.source
        dependsOn "generate${cvarName}Sources"
    }
}

apply from: 'bintray.gradle'

if (file('local.gradle').isFile())
    apply from: 'local.gradle'
